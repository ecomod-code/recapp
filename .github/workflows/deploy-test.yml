name: Deploy to Test Server

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy (e.g., main or feature/x)"
        required: true
        type: string
        default: main

permissions:
  contents: read

concurrency:
  group: deploy-test
  cancel-in-progress: false

jobs:
  deploy:
    name: Deploy to TEST
    runs-on: ubuntu-latest

    # Optional but recommended: add an environment gate
    # Create an environment named "test" in Settings → Environments and add required reviewers.
    environment:
      name: test

    env:
      BRANCH_NAME: ${{ inputs.branch }}

    steps:
      - name: Validate branch exists on GitHub
        run: |
          set -euo pipefail
          if ! git ls-remote --heads \
              "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}" \
              "$BRANCH_NAME" | grep -q "refs/heads/$BRANCH_NAME$"; then
            echo "❌ Branch '$BRANCH_NAME' not found in ${{ github.repository }}"
            exit 1
          fi
          echo "✅ Branch '$BRANCH_NAME' exists"

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TEST_SSH_PRIVATE_KEY }}

      - name: Add test server to known_hosts
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          HOST="${{ secrets.TEST_SERVER_HOST }}"
          PORT="${{ secrets.TEST_SERVER_PORT || '22' }}"
          # Collect common key types. Redirect stderr to avoid noisy output.
          ssh-keyscan -p "$PORT" -t ed25519 "$HOST" >> ~/.ssh/known_hosts 2>/dev/null
          ssh-keyscan -p "$PORT" -t ecdsa  "$HOST" >> ~/.ssh/known_hosts 2>/dev/null
          ssh-keyscan -p "$PORT" -t rsa    "$HOST" >> ~/.ssh/known_hosts 2>/dev/null
          chmod 600 ~/.ssh/known_hosts
      
      - name: Check remote script path
        run: |
          set -euo pipefail
          ssh -p "${{ secrets.TEST_SERVER_PORT || '22' }}" \
            "${{ secrets.TEST_SERVER_USER }}@${{ secrets.TEST_SERVER_HOST }}" \
            -- /bin/bash --noprofile --norc -c 'set -e; ls -l /home/cloud/recapp_deployment; file /home/cloud/recapp_deployment; head -n1 /home/cloud/recapp_deployment'

      - name: Deploy ${{ env.BRANCH_NAME }} to test server
        run: |
          set -euo pipefail
          echo "➡️ Starting remote deployment of branch '${BRANCH_NAME}'"
          ssh -T -p "${{ secrets.TEST_SERVER_PORT || '22' }}" \
            "${{ secrets.TEST_SERVER_USER }}@${{ secrets.TEST_SERVER_HOST }}" \
            -- /bin/bash --noprofile --norc -s -- "$BRANCH_NAME" <<'REMOTE'
          set -euo pipefail
          echo "Remote received branch as \$1=<${1-}>"
          exec /home/cloud/recapp_deployment "$1"
          REMOTE
              echo "✅ Remote deployment of branch '${BRANCH_NAME}' succeeded"
